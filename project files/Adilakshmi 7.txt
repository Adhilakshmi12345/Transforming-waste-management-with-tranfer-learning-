import tensorflow as tf
import numpy as np
import matplotlib.pyplot as plt

IMG_SIZE = (224, 224)
BATCH = 32
DATA_DIR = 'data/waste_images'  # structure: class folders

train_ds = tf.keras.utils.image_dataset_from_directory(
    DATA_DIR,
    validation_split=0.2,
    subset='training',
    seed=42,
    image_size=IMG_SIZE,
    batch_size=BATCH)

val_ds = tf.keras.utils.image_dataset_from_directory(
    DATA_DIR,
    validation_split=0.2,
    subset='validation',
    seed=42,
    image_size=IMG_SIZE,
    batch_size=BATCH)

class_names = train_ds.class_names
num_classes = len(class_names)
AUTOTUNE = tf.data.AUTOTUNE
train_ds = train_ds.prefetch(AUTOTUNE)import tensorflow as tf
import numpy as np
import matplotlib.pyplot as plt

IMG_SIZE = (224, 224)
BATCH = 32
DATA_DIR = 'data/waste_images'  # structure: class folders

train_ds = tf.keras.utils.image_dataset_from_directory(
    DATA_DIR,
    validation_split=0.2,
    subset='training',
    seed=42,
    image_size=IMG_SIZE,
    batch_size=BATCH)

val_ds = tf.keras.utils.image_dataset_from_directory(
    DATA_DIR,
    validation_split=0.2,
    subset='validation',
    seed=42,
    image_size=IMG_SIZE,
    batch_size=BATCH)

class_names = train_ds.class_names
num_classes = len(class_names)
AUTOTUNE = tf.data.AUTOTUNE
train_ds = train_ds.prefetch(AUTOTUNE)
val_ds = val_ds.prefetch(AUTOTUNE)
EPOCHS = 10
history = model.fit(train_ds, validation_data=val_ds, epochs=EPOCHS)base.trainable = True
fine_layers = 15
for layer in base.layers[:-fine_layers]:
    layer.trainable = False

model.compile(optimizer=tf.keras.optimizers.Adam(1e-5),
              loss='sparse_categorical_crossentropy',
              metrics=['accuracy'])

history_fine = model.fit(train_ds,
                         validation_data=val_ds,
                         epochs=EPOCHS + 5,
                         initial_epoch=history.epoch[-1])def plot_metrics(h, title):
    plt.figure(figsize=(12,4))
    plt.subplot(1,2,1)
    plt.plot(h.history['accuracy'], label='Train')
    plt.plot(h.history['val_accuracy'], label='Val')
    plt.title(f'{title} Accuracy')
    plt.legend()
    plt.subplot(1,2,2)
    plt.plot(h.history['loss'], label='Train')
    plt.plot(h.history['val_loss'], label='Val')
    plt.title(f'{title} Loss')
    plt.legend()
    plt.show()

plot_metrics(history, 'Initial')
plot_metrics(history_fine, 'Fine-tuned')
test_ds = tf.keras.utils.image_dataset_from_directory(
    'data/waste_test', image_size=IMG_SIZE, batch_size=BATCH, shuffle=False)
test_ds = test_ds.prefetch(AUTOTUNE)

loss, acc = model.evaluate(test_ds)
print(f'Test accuracy: {acc * 100:.2f}%')from tensorflow.keras.utils import load_img, img_to_array

def predict_image(img_path):
    img = load_img(img_path, target_size=IMG_SIZE)
    arr = img_to_array(img) / 255.0
    arr = np.expand_dims(arr, 0)
    pred = model.predict(arr)[0]
    idx = np.argmax(pred)
    print(f'Predicted: {class_names[idx]} ({pred[idx]*100:.1f}%)')

predict_image('data/new/sample.jpg')




val_ds = val_ds.prefetch(AUTOTUNE)
