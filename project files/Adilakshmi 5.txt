import tensorflow as tf

IMG_SIZE = (224, 224)
BATCH = 32

test_ds = tf.keras.utils.image_dataset_from_directory(
    'data/waste_test',  # your held-out test images
    image_size=IMG_SIZE,
    batch_size=BATCH,
    shuffle=False
)
test_ds = test_ds.prefetch(tf.data.AUTOTUNE)
test_loss, test_acc = model.evaluate(test_ds, verbose=2)
print(f"Test accuracy: {test_acc * 100:.2f}%")
import numpy as np
from tensorflow.keras.utils import load_img, img_to_array

img_path = 'data/new_waste/image123.jpg'
img = load_img(img_path, target_size=IMG_SIZE)
arr = img_to_array(img)
batch = tf.expand_dims(arr, 0)

pred_logits = model.predict(batch)
pred = tf.nn.softmax(pred_logits[0])

class_idx = np.argmax(pred)
confidence = 100 * np.max(pred)

print(f"Predicted: {CLASS_NAMES[class_idx]} ({confidence:.1f}% confidence)")
def predict_waste(model, img_path):
    img = load_img(img_path, target_size=IMG_SIZE)
    arr = img_to_array(img)
    arr = tf.expand_dims(arr, 0)
    pred_logits = model.predict(arr)
    pred = tf.nn.softmax(pred_logits[0])
    idx = np.argmax(pred)
    return CLASS_NAMES[idx], 100 * np.max(pred)

label, conf = predict_waste(model, 'data/new_waste/image123.jpg')
print(f"{label} with {conf:.2f}% confidence")
import matplotlib.pyplot as plt

test_images, test_labels = next(iter(test_ds.take(1)))
predictions = model.predict(test_images)
pred_classes = np.argmax(predictions, axis=1)

plt.figure(figsize=(12, 6))
for i in range(9):
    ax = plt.subplot(3, 3, i+1)
    plt.imshow(test_images[i].numpy().astype("uint8"))
    true = CLASS_NAMES[int(test_labels[i])]
    pred = CLASS_NAMES[pred_classes[i]]
    plt.title(f"True: {true}\nPred: {pred}")
    plt.axis('off')
plt.tight_layout()
plt.show()
